{
  "articles": [
    {
      "path": "about.html",
      "title": "MATH 463 Topics In Biomathematics",
      "description": "Course Syllabus\n",
      "author": [],
      "contents": "\n\nContents\nInstructor Information\nCourse Materials:\nRequired Textbook\nAdditional Resources\n\nCourse Information:\nCourse Description\nPrerequisites\nCourse Goals\nStudent\nLearning Objectives and Assessment\n\nCourse Policies and\nProcedures:\nCoronavirus\nDisease Safety Pertaining to the Course\nAttendance\nAssignments and Grading\n\nCourse Timeline:\nImportant Dates\nWeekly Schedule\n\nUniversity Resources\nfor Students:\nStudents with\nDisabilities\nWriting Center Services\nMy\nReporting Obligation as a Responsible Employee\nNon-discrimination\nStatement\n\nAcademic Honesty and\nIntegrity\nFinal Note\n\nInstructor Information\nInstructor: Dr. Jason M. Graham\nOffice: LSC 319A\nOffice Hours: Mondays 10:00 - 11:00 AM and 2:00\n- 3:00 PM, and Wednesdays 10:00 - 11:00 AM (You may also make an\nappointment to meet with me outside of scheduled office hours.\nAppointments are not necessary for regularly scheduled office\nhours.)\nDr. Graham’s Schedule: Link\n\nEmail: jason.graham@scranton.edu\nPhone: (570) 941-7491\nCourse Materials:\nCourse Webpage: Link\nRequired Textbook\nThere is no required text for this course. Students will be provided\nwith detailed notes, handouts, or other references.\nAdditional Resources\nThree very good general references are:\nNonlinear\nDynamics and Chaos 2nd ed. by Steven H. Strogatz, ISBN:\n9780813349107. This book covers most of the mathematical techniques we\nwill use throughout the course.\nLecture\nNotes on Mathematical Systems Biology by Eduardo Sontag.\nMathematical\nModelling in Systems Biology: An Introduction by Brian\nIngalls.\nCourse Information:\nCourse Description\nA study of discrete and continuous mathematical models in biology.\nTopics include: population dynamics of single species and interacting\nspecies, infectious diseases, population genetics, and cell populations\nwith tumor modeling.\nPrerequisites\nThe prerequisites for this course is MATH 341 Differential\nEquations and MATH 351 Linear Algebra. Specifically, the\nstudent is expected to have a knowledge of the theory and applications\nof elementary linear algebra and basic ordinary differential equations\n(ODEs).\nCourse Goals\nStudents will gain college level knowledge in applied\nmathematics.\nStudents will be able to apply mathematics to address real world\nproblems.\nStudents will gain competency in analytical and critical\nreasoning.\nStudents will gain experience in utilizing R to create programs\nand solve problems as appropriate to the discipline of\nBiomathematics.\nStudents will gain experience using \\(\\LaTeX\\) to prepare and revise written\ndocuments as appropriate to the discipline of Biomathematics.\nStudent Learning\nObjectives and Assessment\n\n\nAfter taking this course, the student should be able to:\n\n\nMethods of assessment\n\n\nUse mathematical tools from calculus, differential equations, and linear\nalgebra to analyze foundational mathematical models arising in the life\nsciences.\n\n\nHomework assignments and in-class written exams.\n\n\nInterpret the meaning of mathematical equations or models representing\nvarious biological processes.\n\n\nHomework assignments, model reports, and final project.\n\n\nUtilize computing tools such as R to analyze and interpret data-driven\nmathematical models.\n\n\nHomework assignments, model reports, and final project.\n\n\nCommunicate effectively in writing their work in applying the techniques\nof applied mathematics to problems arising in the life sciences.\n\n\nHomework, model reports, and final project consisting of a written\npaper.\n\n\nLink with\nMathematics Program Learning Outcomes\nThe student learning objectives of this course are linked with the\nMathematics Program Learning Outcome\n“Demonstrate competence in analytical and critical\nreasoning.”\n“Demonstrate college-level knowledge in applied\nmathematics.”\nLink with\nGeneral Education Goals and Objectives\nMATH 463 has been designated an EPW Level II course. In order to\nfulfill the learning objectives for EPW Level II students will be asked\nto complete two writing intensive assignments. These are\na model report assignment,\nand a final project.\nDetails for these assignments are described below and additional\nguidelines are posted on thee course learning management system.\nCourse Policies and\nProcedures:\nCoronavirus\nDisease Safety Pertaining to the Course\nIn consideration of the care and concern for one another and members\nof our community, unless you are reasonably unable to do so, please take\nthe following steps as a student in this course to mitigate the spread\nof coronavirus:\nFollow the Royals\nBack Together protocols for isolation if you have a confirmed case\nof coronavirus disease (COVID-19) .\nDo not attend class if you are experiencing any COVID-19 related\nsymptoms as described at this\nlink.\nFollow the Royals\nBack Together protocols if you believe that you have been exposed to\nthe coronavirus. Please visit this\nlink for more information on the transmission of the\ncoronavirus.\nWear appropriate face covering (i.e., as approved by the\nRoyals\nBack Together plan) over your mouth and nose while indoors.\nAttendance\nClass attendance and active participation in class discussion is\nstrongly encouraged. If absence is necessary, please inform the\ninstructor and develop a plan to make up for missing content as soon as\npossible.\nAssignments and Grading\nGrade Policy\nThe course grade will be based on two in-class exams (totaling 50%\nand evenly distributed), approximately ten weekly homework assignments\n(20%), one model report (10%), and a final project (20%).\nGrade Scale\nLetter grades will be assigned based on the following scale:\n\n\nGrade Range\n\n\nLetter Grade\n\n\n94-100\n\n\nA\n\n\n90-93\n\n\nA-\n\n\n87-89\n\n\nB+\n\n\n83-86\n\n\nB\n\n\n80-82\n\n\nB-\n\n\n76-79\n\n\nC+\n\n\n72-75\n\n\nC\n\n\n69-71\n\n\nC-\n\n\n65-68\n\n\nD+\n\n\n60-64\n\n\nD\n\n\n<60\n\n\nF\n\n\nHomework\nThere will be weekly homework assignments. Assignments will be posted\non the course learning management system and made up of problems\nrelating to or extending the material covered in class discussions.\nWorking problems is essential to learning the material and doing well on\nexams.\nDo not underestimate the value (and joy) of carefully working through\nhomework problems.\nExams\nThe in-class exams are meant to assess 1) students’ understanding of\nthe material covered in class and in homework assignments, 2) students’\nunderstanding of the core concepts, 3) students’ problem solving\nabilities, and 4) students’ ability to think independently. Exam 1 is\nscheduled for March 2, and Exam 2 is scheduled for May 4. In writing the\ntests, I assume that you have been studying the material at least 6\nhours per week outside of class.\nModel Report\nAs part of the required coursework for Topics in\nBiomathematics, students are required to submit a model report. The\ngoal of this assignment is for students to read, understand, assess, and\nexplain modeling results from a recently published paper in\nbiomathematics. The model report will make up 10% of the course grade.\nStudents must submit at least two drafts of a model report. A model\nreport should be three-five typed pages and prepared using \\(\\LaTeX\\). The first draft is due March 23\nand the final draft is due May 4. A set of guidelines for the model\nreport is posted on the course learning management system.\nFinal Project\nIt should be recognized that the mathematical techniques developed in\nclass are applicable in broader situations than can be covered in\nlectures and homework. Thus, students are asked to individually explore\na topic in biomathematics beyond what is covered in lecture by means of\na final project. Final projects should be an 8-12 page manuscript typed\nusing \\(\\LaTeX\\), and students must\nsubmit at least two drafts of their written final projects. The final\ndraft is due no later than 5:00pm on Wednesday May 18.\nAll written and presented work must be original, explained in your own\nwords, and use proper citation for works referenced.\nA set of guidelines for the final project is posted on the course\nlearning management system. You must choose a topic for your\nfinal project and submit a one to two paragraph description of your\nproposed project along with at least two scholarly references to me no\nlater than 3:00pm on March 2.\nUse of Digital Technology\nWork and research in Biomathematics requires professionals in the\nfield to make use of digital technology. The primary uses of digital\ntechnology in Biomathematics is for producing and importing data,\nscientific computing, visualization of data and model-based simulations,\nand preparing written documents to explain mathematical results. Two of\nthe most commonly used technological tools are R for scientific\ncomputing and \\(\\LaTeX\\) for written\ndocument preparation. Students in this course will be expected to use R,\nand \\(\\LaTeX\\). R can be installed to\nany platform via the downloads available here. R is best used with the\nintegrative development environment RStudio which can be installed from\nhere.\nCourse Timeline:\nImportant Dates\n\n\nEvent\n\n\nDate\n\n\nClasses begin\n\n\nWednesday, January 26\n\n\nLast day to add classes\n\n\nTuesday, February 1\n\n\nLast day for 100% tution refund\n\n\nFriday, February 4\n\n\nLast day to drop with no grade\n\n\nFriday February 25\n\n\nExam 1\n\n\nWednesday, March 2\n\n\nSemester Midpoint\n\n\nFriday, March 11\n\n\nLast day of class before spring break\n\n\nFriday, March 11\n\n\nClasses resume after spring break\n\n\nMonday, March 21\n\n\nLast day to withdraw with W grade\n\n\nWednesday, April 13\n\n\nLast day of class before Easter break\n\n\nWednesday, April 13\n\n\nClasses resume after Easter\n\n\nTuesday, April 19\n\n\nExam 2\n\n\nWednesday, May 4\n\n\nLast day of class\n\n\nFriday, May 13\n\n\nFinal exams begin\n\n\nMonday, May 16\n\n\nFinal exams end\n\n\nFriday, May 20\n\n\nWeekly Schedule\nWeek 1: Introduction to Biomathematics\nWeek 2: Basic Biomathematical Workflow\nWeek 3: Introduction to Mathematical Modeling\nWeek 4: Population Models\nWeek 5: Compartment Models\nWeek 6: SIR Type Models\nWeek 7: Exam 1\nWeek 8: The Chemostat Bio-reactor\nWeek 9: Spring Break\nWeek 10: Functional Forms\nWeek 11: Mass Action and Reaction Kinetics\nWeek 12: Dimensional Analysis\nWeek 13: Phase-Plane Methods\nWeek 14: Mathematical Physiology\nWeek 15: Exam 2\nWeek 16: Additional Topics\nWeek 17: Finals Week\nUniversity Resources for\nStudents:\nStudents with Disabilities\nReasonable academic accommodations may be provided to students who\nsubmit relevant and current documentation of their disability. Students\nare encouraged to contact the Center for Teaching and Learning\nExcellence (CTLE) at disabilityservices@scranton.edu or (570) 941-4038 if\nthey have or think they may have a disability and wish to determine\neligibility for any accommodations. For more information, please visit\nhttp://www.scranton.edu/disabilities.\nWriting Center Services\nThe Writing Center focuses on helping students become better writers.\nConsultants will work one-on-one with students to discuss students’ work\nand provide feedback at any stage of the writing process. Scheduling\nappointments early in the writing progress is encouraged.\nTo meet with a writing consultant, call (570) 941-6147 to schedule an\nappointment, or send an email with your available meeting times, the\ncourse for which you need assistance, and your phone number to: writing-center@scranton.edu. The Writing Center does\noffer online appointments for our distance learning students. Please\ncontact Amye Archer at amye.archer@scranton.edu for more information.\nMy Reporting\nObligation as a Responsible Employee\nAs a faculty member, I am deeply invested in the well-being of each\nstudent I teach. I am here to assist you with your work in this course.\nAdditionally, if you come to me with other non-course-related concerns,\nI will do my best to help. It is important for you to know that all\nfaculty members are required to report incidents of sexual harassment or\nsexual misconduct involving students. This means that I cannot keep\ninformation about sexual harassment, sexual assault, sexual\nexploitation, intimate partner violence or stalking confidential if you\nshare that information with me. I will keep the information as private\nas I can but am required to bring it to the attention of the\nUniversity’s Title IX Coordinator, Elizabeth M. Garcia, or Deputy Title\nIX Coordinator, Christine M. Black, who, in conversation with you, will\nexplain available support, resources, and options. I will not report\nanything to anybody without first letting you know and discussing\nchoices as to how to proceed. The University’s Counseling Center\n(570-941-7620) is available to you as a confidential resource;\ncounselors (in the counseling center) do not have an obligation to\nreport to the Title IX Coordinator.\nNon-discrimination Statement\nThe University is committed to providing an educational, residential,\nand working environment that is free from harassment and discrimination.\nMembers of the University community, applicants for employment or\nadmissions, guests, and visitors have the right to be free from\nharassment or discrimination based on race, color, religion, ancestry,\ngender, sex, pregnancy, sexual orientation, gender identity or\nexpression, age, disability, genetic information, national origin,\nveteran status, or any other status protected by applicable law.\nStudents who believe they have been subject to harassment or\ndiscrimination based on any of the above class of characteristics, or\nexperience sexual harassment, sexual misconduct or gender discrimination\nshould contact Elizabeth M. Garcia, Title IX Coordinator, (570) 941-6645\nelizabeth.garcia2@scranton.edu. The United States\nDepartment of Education’s Office for Civil Rights (OCR) enforces Title\nIX. Information regarding OCR may be found at https://www.ed.gov/about/offices/list/ocr/index.html.\nThe University of Scranton Sexual Harassment and Sexual Misconduct\nPolicy can be found online at https://www.scranton.edu/diversity. All reporting\noptions and resources are available at https://www.scranton.edu/CARE.\nAbout Pronouns\nIt is easy to make assumptions about what pronouns people prefer, but\nwe try not to! Please tell us in class or via a private email if you\nwould like to let us know what your pronouns are, if/when you would like\nus (and others) to use them, and certainly feel free to correct us or\nothers if we make a mistake. Using the pronouns that a person has\nindicated they prefer is considered both professional and polite, and as\nsuch we ask that all members of our class use the appropriate\npronouns.\nIf you have questions about this, please feel free to look up more\ninformation here (https://www.mypronouns.org/) or email jason.graham@scranton.edu with any questions.\nAcademic Honesty and\nIntegrity\nEach student is expected to do their own work. It is also expected\nthat each student respect and abide by the Academic Code of Honesty as\nset forth in the University of Scranton student handbook. Conduct that\nviolates the Academic Code of Honesty includes plagiarism, duplicate\nsubmission of the same work, collusion, providing false information,\nunauthorized use of computers, theft and destruction of property, and\nunauthorized possession of tests and other materials. Steps taken in\nresponse to suspected violations may include a discussion with the\ninstructor, an informal meeting with the dean of the college, and a\nhearing before the Academic Dishonesty Hearing Board. Students who are\nfound to have violated the Code will ordinarily be assigned the grade F\nby the instructor and may face other sanctions. The complete Academic\nCode of Honesty is located on the University website at https://www.scranton.edu/academics/wml/acad-integ/acad-code-honesty.shtml.\nFinal Note\nThe instructor reserves the right to modify this syllabus; students\nwill immediately be notified of any such changes and an updated syllabus\nwill be made available to the class via the course learning management\nsystem.\n\n\n\n",
      "last_modified": "2022-01-25T14:19:12-05:00"
    },
    {
      "path": "index.html",
      "title": "Topics in Biomathematics",
      "description": "Welcome to the website for MATH 463 Topics in Biomathematics!\n",
      "author": [],
      "contents": "\nWhat is MATH 463?\nMATH 463 Topics in Biomathematics, is a course taught at the\nUniversity of Scranton. See the\ncourse\nsyllabus for more information. This site is a home for many of the\ncourse materials developed by Jason M. Graham\nin teaching MATH 463 since 2013.\nWhat is Biomathematics?\nBiomathematics is concerned with the use of mathematical methods\n(e.g., linear algebra, differential equations, dynamical\nsystems, and probability theory) to understand phenomenon in the life\nsciences, it is part of the larger field of mathematical\nand theoretical biology. Mathematical and theoretical biology\nprovide a solid foundation for computational and quantitative approaches\nto investigations in biology and medicine.\n\n\n\n",
      "last_modified": "2022-01-25T14:19:12-05:00"
    },
    {
      "path": "notes001.html",
      "title": "Course Notes 1",
      "description": "Introduction to Biomathematics\n",
      "author": [
        {
          "name": "Jason M. Graham",
          "url": "https://topicsinbiomath.netlify.app/"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nGoals\nTopics in Biomathematics\nLecture Notes\nCourse Projects\nThe Use of R\n\nWhat is Biomathematics?\nFurther Reading\nBasic Texts in\nBiomathematics\nMathematical Population\nDynamics\nMathematical Physiology\nMathematical\nTechniques and Computing\nApproaches not Covered in\nClass\nResearch in\nBiomathematics\n\n\nGoals\nAfter reading this section of notes, you should\nbe aware of the general structure of the course Topics in\nBiomathematics, and\nhave a general sense of what the field of biomathematics is about\nand how we will approach learning biomathematics in the course\nTopics in Biomathematics.\nTopics in Biomathematics\nWelcome to Topics in Biomathematics! The set of notes to\nwhich this document belongs have been developed from a course, MATH 463\nTopics in Biomathematics, taught at the University of Scranton since 2013.\nThe purpose of this course is to provide students having a background in\nlinear algebra and differential equations with a grounding in\nmathematical modeling for biological phenomenon. We hope that these\nnotes may also be useful for a somewhat wider audience of individuals\nthat are interested in mathematical or theoretical biology, or areas of\napplied mathematics that consider scientific problems from biology or\nmedicine.\nLecture Notes\nThere are several reasons for the existence of these notes. The\nprincipal ones are\nto provide a reference that strikes a desired balance between the\nsubjects of mathematics and science,\nto provide a reference that includes discussion of some important\ntopics from mathematical modeling that are relevant in contexts more\ngeneral than just mathematical biology,\nto provide a reference that helps to bridge the gap that is\nnecessary to close in order to begin reading the research literature,\nand\nto provide a reference that encourages good work flow practices\nsuch as integrating analysis, computing, and the written presentation of\nresults.\nCourse Projects\nWhen teaching MATH 463 Topics in Biomathematics, an\nimportant component of the course is student projects. There are two\ndifferent types of projects that students in Topics in\nBiomathematics are asked to complete: model reports, and a final\nindependent project. The model reports are meant for students to get\nearly exposure to reading research literature that involves the\ndevelopment or application of mathematical models in biology and\nmedicine. The idea is for students to get experience with the\n“translation” process of going from a real world biological problem to a\nmathematical abstraction and back again. Furthermore, students are asked\nto think and write critically about a mathematical model published in a\nrecent research article. One might reasonably view the model report\nassignment as asking students to write a peer-review referee report for\na manuscript that has already been reviewed and published.\nThe final independent project is meant as a capstone to the course.\nIt is not the expectation that every student will do an entirely\noriginal research project that involves developing a novel mathematical\nmodel from scratch, although in practice this does occur fairly often.\nHowever, the final project requires a more substantial synthesis of\nscientific and mathematical knowledge and understanding than the model\nreport or other assignments such as homework or written exams.\nThis is all meant to highlight the fact that throughout these set of\nlecture notes, we have tried to provide pointers to current or at least\nfairly recent research that is reasonably accessible to the average\nstudent in MATH 463 in order to facilitate the model report and final\nindependent projects. Every time we discuss a topic in the notes, we\nfollow the discussion up with specific references where students may go\nto in order to learn more, acquire project ideas, and see what else is\nout there regarding mathematical and theoretical biology.\nThe Use of R\nThroughout these notes and the Topics in Biomathematics\ncourse we make regular use of the R software and ecosystem for\ncomputing. It is impossible to do very much interesting work in science\nand applied mathematics, including mathematical and theoretical biology,\nwithout computation. For the purposes of this course, we will need to\nemploy numerical methods for solving equations, optimization, and linear\nalgebra. In addition, we will find it very helpful to be able to create\nvisualizations that are simple yet professional in appearance. The R\nenvironment and language possesses several features that make it highly\nappropriate for all of these purposes. Among it’s many advantages, R is\nalso freely available.\nIn addition to R, we also use RStudio, an integrated development\nenvironment that enhances the use of R. Using RStudio makes it possible\nto access the Topics in Biomathematics lecture notes in an\ninteractive fashion because all of the notes are written as R Markdown notebooks. This\nallows us to integrate text, equations, figures, R code, plots, etc. and\nto compile the result as both html and pdf files. On top of that,\nstudents will have a template they can follow in order to write and\npresent their work for the model report and independent final\nprojects.\nWhat is Biomathematics?\nBiomathematics is concerned with the use of mathematical methods\n(e.g., linear algebra, differential equations, dynamical\nsystems, and probability theory) to understand phenomenon in the life\nsciences, it is part of the larger field of mathematical\nand theoretical biology. Mathematical and theoretical biology\nprovide a solid foundation for computational and quantitative approaches\nto investigations in biology and medicine. The general work flow in\nbiomathematics proceeds as follows:\nStart with some real world phenomenon of interest from the life\nsciences.\nAbstract from the real world in order to highlight essential\nfeatures, mechanisms, processes, etc. with the goal of answering some\nspecific question or solving some particular problem. This typically\ninvolves making some set of simplifying assumptions about the biological\nworld.\nRepresent your abstraction from step 2 mathematically, say for\nexample as a system of equations. This typically involves the\nconstruction of a mathematical\nmodel.\nApply rigorous techniques from applied mathematics or scientific\ncomputing in order to understand the mathematical representation in step\n3 with the goal of using it to solve a problem or answer a\nquestion.\nPlace your results from step 4 in the context of the original real\nworld biological phenomenon.\nIt may be necessary to repeat steps 2-5 multiple times with\nrefinements at each iteration in order for your efforts to yield\nsomething that is truly useful for addressing a scientific question.\nBiomathematics, which for the purposes of this course we consider\nsynonymous with mathematical biology, emerges as a distinct field due to\nthe fact that carrying out the previously described steps has resulted\nin the (continuing) development of some common methods and terminology.\nFurthermore, we carefully distinguish biomathematics from the field of\nbiostatistics.\nWhile biomathematics certainly involves the use of probability and\nstatistics, these areas play a different role within biomathematical\ninvestigations than they do in biostatistical investigations.\nAdditionally, the relationship between theory and experiment is\ndifferent in biomathematics than in biostatistics.\nIn the next lecture, we will spend some more time fleshing out the\nsteps of the basic biomathematical workflow. From there, we will begin\nto examine some general principles related to the construction of\nmathematical models. That is, we will study those ideas from\nmathematical modeling that are essential for biomathematics. Our goal is\nto get to a point where developing a mathematical model and using it to\nanswer some biological question does not seem like an impossible\ntask.\nFurther Reading\nThroughout this course, you are encouraged to look at additional\nreferences for the purposes of seeing the perspectives of others and for\nlearning about topics and methods that are not covered explicitly in\nlectures or assigned reading. The following sections provide an overview\nof some additional texts you might want to examine at some point.\nBasic Texts in\nBiomathematics\nSeveral established textbooks in biomathematics are widely available.\nSee for example, (Allen 2007; Britton 2003; de\nVries et al. 2006; Edelstein-Keshet 2005; Friedman and Kao 2014; Murray\n2002, 2003). The two-volume text by Murray,\n(Murray\n2002, 2003), is considered something of a\nstandard, the books cover a variety of different topics well beyond what\nwe can, but assume a greater mathematical background than we do in this\ncourse. There are also several nice sets of lecture notes that are\navailable online for free, such as those by Byrne,\nChasnov,\nGoldstein\nand Pedley, Ingalls,\nand Sontag.\nMathematical Population\nDynamics\nThe earliest motivations for the development of biomathematics comes\nfrom theoretical\necology and population\ndynamics. A sub-area of these fields is mathematical\nepidemiology. Excellent references for learning more about these\nfields are provided by(Brauer and Castillo-Chavez 2012; Kot\n2001).\nMathematical Physiology\nMathematical\nphysiology is another large sub-discipline within biomathematics. A\nstandard reference is provided by (Keener and Sneyd 2009b, 2009a). Note that mathematical\nphysiology intersects with biophysics\nand biochemistry.\nNeuronal Dynamics\nAn important and well-developed topic in mathematical physiology and\nbiophysics is mathematical\nand computational neuroscience. Excellent references for this field\nare (Börgers 2017; Ermentrout and Terman 2010). You are\nalso encouraged to watch the videos from two conference talks on Brain\nControl and Modeling\nLarge Scale Brain Activity.\nMathematical Techniques\nand Computing\nIn this course, we will primarily use techniques from linear\nalgebra and ordinary\ndifferential equations. In much of our study of mathematical models\narising in biomathematics, we will be equally interested in qualitative\nand quantitatve results. The area of applied mathematics known as dynamical\nsystems theory provides the mathematical techniques for a\nqualitative analysis of mathematical models. During the course, we will\nneed to develop and employ some techniques for differential equations\nthat may not be covered in a first course in ODEs. The following two\nreferences may be very helpful in learning more about applied dynamical\nsystems and differential equations as they relate to biomathematics\n(Jones, Plank, and Sleeman 2010; Strogatz 2015).\nWhen it comes to both the quantitative and qualitative analysis of\ndifferential equation models, it is very helpful to do so with the aid\nof a computer. Both the R\nlanguage for statistical computing and the Julia language for scientific\ncomputing are excellent for our purposes. Each of these has an\nassociated ecosystem with packages that help make mathematical modeling\nand analysis easier. In this course, we primarily use R because of the\nphaseR package for the\nphase-line and phase-plane analysis of one- and two-dimensional systems\nof differential equations. Furthermore, the notes for this course are\nwritten using the RStudio integrated\ndevelopment environment associated with R. Thus, using R and RStudio\nallows the reader to go through these notes interactively to enhance the\nlearning experience.\nApproaches not Covered in\nClass\nThere are many different classes of mathematical models and a variety\nof different approaches to biomathematics. Notably absent from the main\ndiscussion in this course is stochastic\nmodels (an excellent reference with applications in biology is\nprovided by (Allen 2011)) and game theory.\nResearch in Biomathematics\nBiomathematics and related fields are active areas of research in\nwhich there are new peer-reviewed articles appearing on a daily basis.\nThe Society for Mathematical Biology\nis a great source for information on what is happening in the field of\nbiomathematcs. If you are interested to see what is going on at the\ncutting edge, you might also want to look at some of the following\nlinks:\nJournal of\nMathematical Biology\nJournal\nof Theoretical Biology\nBulletin of\nMathematical Biology\nMathematical\nBiosciences and Engineering\nPLos Computational\nBiology\narXiv on Quantitative\nBiology\n\n\n\nAllen, Linda J. S. 2007. Introduction to Mathematical Biology.\nPearson/Prentice Hall. https://agris.fao.org/agris-search/search.do?recordID=US201300115181.\n\n\n———. 2011. An Introduction to Stochastic Processes with Applications\nto Biology. Second. CRC Press, Boca Raton, FL. https://mathscinet.ams.org/mathscinet-getitem?mr=2560499.\n\n\nBörgers, Christoph. 2017. An Introduction to Modeling Neuronal\nDynamics. Vol. 66. Texts in Applied Mathematics.\nSpringer, Cham. https://doi.org/10.1007/978-3-319-51171-9.\n\n\nBrauer, Fred, and Carlos Castillo-Chavez. 2012. Mathematical Models\nin Population Biology and Epidemiology. Second. Vol. 40. Texts in\nApplied Mathematics. Springer, New York. https://doi.org/10.1007/978-1-4614-1686-9.\n\n\nBritton, Nicholas F. 2003. Essential Mathematical Biology.\nSpringer Undergraduate Mathematics Series.\nSpringer-Verlag London, Ltd., London. https://doi.org/10.1007/978-1-4471-0049-2.\n\n\nEdelstein-Keshet, Leah. 2005. Mathematical Models in Biology.\nVol. 46. Classics in Applied Mathematics. Society for\nIndustrial and Applied Mathematics (SIAM), Philadelphia, PA. https://doi.org/10.1137/1.9780898719147.\n\n\nErmentrout, G. Bard, and David H. Terman. 2010. Mathematical\nFoundations of Neuroscience. Vol. 35. Interdisciplinary\nApplied Mathematics. Springer, New York. https://doi.org/10.1007/978-0-387-87708-2.\n\n\nFriedman, Avner, and Chiu-Yen Kao. 2014. Mathematical Modeling of\nBiological Processes. Springer.\n\n\nJones, D. S., M. J. Plank, and B. D. Sleeman. 2010. Differential\nEquations and Mathematical Biology. Chapman &\nHall/CRC Mathematical and Computational\nBiology Series. CRC Press, Boca Raton, FL. https://mathscinet.ams.org/mathscinet-getitem?mr=2573923.\n\n\nKeener, James, and James Sneyd. 2009a. Mathematical Physiology.\nVol. I: Cellular Physiology.\nSecond. Vol. 8/. Interdisciplinary Applied Mathematics.\nSpringer, New York. https://doi.org/10.1007/978-0-387-79388-7.\n\n\n———. 2009b. Mathematical Physiology. Vol.\nII: Systems Physiology. Second. Vol. 8/.\nInterdisciplinary Applied Mathematics. Springer, New\nYork. https://doi.org/10.1007/978-0-387-79388-7_1.\n\n\nKot, Mark. 2001. Elements of Mathematical Ecology.\nCambridge University Press, Cambridge. https://doi.org/10.1017/CBO9780511608520.\n\n\nMurray, J. D. 2002. Mathematical Biology. I.\nThird. Vol. 17. Interdisciplinary Applied Mathematics.\nSpringer-Verlag, New York. https://mathscinet.ams.org/mathscinet-getitem?mr=1908418.\n\n\n———. 2003. Mathematical Biology. II. Third. Vol.\n18. Interdisciplinary Applied Mathematics.\nSpringer-Verlag, New York. https://mathscinet.ams.org/mathscinet-getitem?mr=1952568.\n\n\nStrogatz, Steven H. 2015. Nonlinear Dynamics and Chaos. Second.\nWestview Press, Boulder, CO. https://mathscinet.ams.org/mathscinet-getitem?mr=3837141.\n\n\nVries, Gerda de, Thomas Hillen, Mark Lewis, Johannes Müller, and Birgitt\nSchönfisch. 2006. A Course in Mathematical Biology. Vol. 12.\nMathematical Modeling and Computation.\nSociety for Industrial and Applied Mathematics (SIAM),\nPhiladelphia, PA. https://doi.org/10.1137/1.9780898718256.\n\n\n\n\n",
      "last_modified": "2022-01-25T14:19:14-05:00"
    },
    {
      "path": "notes002.html",
      "title": "Course Notes 2",
      "description": "Basic Biomathematical Work Flow\n",
      "author": [
        {
          "name": "Jason M. Graham",
          "url": "https://topicsinbiomath.netlify.app/"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nGoals\nOverview\nSimple Population\nGrowth\nGeneral Model of\nInflammation\nFurther Reading\nMathematical\nModels for Population Growth\nMathematical Models\nof Inflammation\n\n\nGoals\nAfter reading this section of notes, you should\nhave developed a greater appreciation for the basic work flow of\nbiomathematics,\nknow the meaning of “per capita rate of change” as it relates to\npopulation growth,\nknow the basic “exponential growth” model \\(\\frac{dN}{dt} = rN\\).\nOverview\nIn the previous lecture, we introduced the basic work flow of\nbiomathematics:\nStart with some real world phenomenon of interest from the life\nsciences.\nBy making some set of simplifying assumptions, abstract from the\nreal world in order to highlight essential features for the purposes of\nanswering some specific question or solving some particular\nproblem.\nRepresent your abstraction from step 2 as a mathematical model.\nUse techniques from applied mathematics or scientific computing in\norder to understand the mathematical representation in step 3 with the\ngoal of solving a problem or answering a question.\nPlace your results from step 4 in the context of the original real\nworld biological phenomenon.\nIn this lecture, we will illustrate these steps by way of two\nexamples. One is an extremely simple example about population growth,\nwhile the other is an example from a paper concerned with understanding\ngeneral features of the inflammatory process (Herald 2010).\nSimple Population Growth\nIndividual organisms typically belong to a population. Understanding\nthe growth of a population is important for understanding the ecology\nand evolution of organisms. In particular, one may want to know about\nfactors that lead to the extinction of a species. Of course, a\npopulation of organisms belongs to an ecosystem in which it interacts\nwith its environment and other species. Before we get carried away and\ntry to understand an entire ecosystem, it is useful to theorize about\nhow a single-species population may change as a function of time.\nConsider a simple isolated and homogeneous population. Let \\(N(t)\\) denote the number (or sometimes\ndensity) of individuals in the population at time \\(t\\). For simplicity we will assume that\n\\(N\\) is a continuous and\ndifferentiable function of the continuous variable \\(t\\). Later we will reflect on these\nassumptions and discuss modifications that could be made if necessary.\nWe define\n\\(\\text{per capita rate of change} =\n\\frac{1}{N}\\frac{dN}{dt}\\)\nnoting that this quantity has units of \\(\\frac{1}{\\text{time}}\\). The point is that\nwe can arrive at a mathematical model for the growth of a population by\nspecifying a formula for the per capita rate of change. Let’s begin with\nthe simplest assumption that we can possibly make, suppose that the per\ncapita rate of change is constant. That is, suppose\n\\(\\frac{1}{N}\\frac{dN}{dt} =\nr\\).\nThen,\n\\(\\frac{dN}{dt} = rN\\).\nLet’s make two observations about this last equation:\nIf \\(r > 0\\), then \\(rN >0\\) (populations are always positive\nso we assume implicitly that \\(N >\n0\\)) and thus \\(\\frac{dN}{dt} >\n0\\). Therefore, if the constant rate \\(r > 0\\), then the population will always\nbe increasing. On the other hand, if \\(r <\n0\\), then the population will always be decreasing.\nReflection: Sketch the graph of a function that is\nalways positive and always increasing. Sketch the graph of a function\nthat is always positive and always decreasing.\nGiven an initial value of the population \\(N(0) = N_0\\), \\(N(t) = N_{0}e^{rt}\\) satisfies the\ndifferential equation \\(\\frac{dN}{dt} =\nrN\\).\nReflection: Take a moment to verify this by\nsubstituting \\(N(t) = N_{0}e^{rt}\\)\ninto both sides of the equation. In the homework you will be asked to\nderive this solution using the method of\nseparation. (Chances are that you have done this before.)\nLet’s look at the graph of \\(N(t) =\nN_{0}e^{rt}\\):\n\n\n\nFigure 1:  Exponential growth model results.\n\n\n\n(Note: It is worth the effort to remember forever\nand all time that the solution of the differential equation\n\\(\\frac{dx}{dt} = ax\\),\nwith initial condition \\(x(0)=x_0\\)\nis \\(x(t) = x_{0}e^{at}\\).)\nBased on our observations, we see that a population that obeys the\nmodel \\(\\frac{dN}{dt}=rN\\) will grow\n(if \\(r > 0\\)) or decay (if \\(r < 0\\)) in an exponential fashion.\nAn obvious question is, what determines if \\(r\\) is positive or negative? One way to\nmake sense of this is to think of \\(r\\)\nas the difference between the per capita birth rate \\(b\\) and the per capita death rate \\(d\\) so that \\(r=b-d\\). Then \\(r\n> 0\\) if \\(b > d\\) and\n\\(r < 0\\) if \\(b < d\\). Thus, a population is predicted\nto go extinct (in the long run as \\(t\n\\rightarrow \\infty\\)) if the per capita death rate is greater\nthan the per capita birth rate.\nOne problem with the model is that long term exponential growth is\nunrealistic. The survival of a real population depends on resources such\nas food and water. An exponentially growing population would soon\ndeplete all available resources. On the other hand, it is not\nunrealistic for a population to initially grow exponentially when the\npopulation numbers are very small relative to the availability of\nresources. Later on we will discuss ways to adjust the model so that\ngrowth is exponential when the population is small but slows as the\npopulation increases.\nNotice how we hit each step of the biomathematics work flow during\nthe course of our discussion on population growth. We began with a real\nworld phenomenon, abstracted to an isolated homogeneous population,\nwrote down a mathematical model, derived information from the model and\ncast that information in the context of the original real world\nphenomenon. Let’s look at another example of how the biomathematics work\nflow plays out in the context of more recent research.\nGeneral Model of\nInflammation\nInflammation\nis a normal part of the immune response\nfor defense against invasion by foreign cells or molecules. However,\ninflammation may become chronic and lead to disease, sepsis, and even death.\nFor the purposes of both treatment and prevention of disease, it is\nimportant to understand the conditions that lead to chronic\ninflammation.\nWithout going into the biological and chemical details, we know that\ninflammation is controlled and mediated by immune cells (the macrophage)\nwhose behavior is regulated by signaling molecules known as cytokines. Thus, it is\nreasonable for the purposes of abstraction to encapsulate the immune\nresponse by the activities of macrophage cells, cytokines, and an\ninvading body such as a bacteria cell. This is exactly what is done in\nthe paper (Herald 2010).\nFigure 2 shows a schematic corresponding to our abstraction of the\nimmune response. The macrophage cell population responds to bacterial\ninvasion and produces cytokines that mediate the immune response. The\nexact details of the interactions are governed by model parameters and\nmathematical relationships between the interacting cell populations and\ncytokines.\n\n\n\nFigure 2:  Schematic of inflammation model. This corresponds roughly to\nFigure 1 in (Herald 2010).\n\n\n\nIn (Herald 2010), the author converts the\nmodel diagram into a mathematical model in the form of a coupled system\nof nonlinear differential equations shown here:\n\\[\\begin{align}\n\\frac{dM}{dt} &= s + \\frac{r C}{1 + k_{1} C} - m_{d} M, \\\\\n\\frac{dC}{dt} &=  p_{c} B M + M \\frac{a C}{(1 + k_{2} C)}\\frac{1}{(1\n+ k_{3} A)} - c_{d} C,\\\\\n\\frac{dA}{dt} &=  p_{a} C M - a_{d} A, \\\\\n\\frac{dB}{dt} &= g B - b_{d} M B.\n\\end{align}\\]\nLater on in the course we will study this model in more detail. For\nnow, note that\n\\(M\\) - macrophage cell\npopulation\n\\(C\\) - inflammatory cytokine\nconcentration\n\\(A\\) - anti-inflammatory cytokine\nconcentration\n\\(B\\) - bacteria cell\npopulation\nIn the paper, the author uses the model equations to show that under\na certain set of circumstances a bacterial pathogen will not provide a\nsufficient trigger to cause chronic inflammation. On the other hand, if\nconditions are right, even a minor bacterial infection can lead to\nchronic inflammation. We leave the details of the analysis for later in\nthe course. Notice that this example contains all of the components of\nthe basic biomathematics work flow.\nThe real world phenomenon of interest from the life sciences is\ninflammation.\nFigure 2 corresponds to an abstraction of the biochemical details of\nthe immune system highlighting what is thought to be the essential\nfeatures of the inflammatory response.\nClearly there is a mathematical model. A major portion of this\ncourse is devoted to understanding how one might come up with such a\nsystem of equations. These were not simply pulled out of thin air.\nIn (Herald 2010), the author uses techniques\nfrom dynamical\nsystems and bifurcation\ntheory in order to derive useful information from the model\nequations.\nThe author’s analysis of the model system explains some aspects of\ninflammation and pinpoints conditions that lead to chronic inflammation.\nThe authors work also explains why certain therapies for chronic\ninflammation are not successful.\nThere are still many questions about inflammation to be addressed\nbeyond what is done in (Herald 2010). However, in order to make\nprogress more details of the immune response may need to be included.\nThis will involve either modifying the system of equations displayed in\nthis section, or using a different mathematical model altogether. For\nnow, the point to take away is that, often times, this is how work in\nbiomathematics proceeds. In the next lecture, we will start to learn\nsome essential principles of mathematical modeling that will help us to\nsee where equations such as the ones presented in this section come\nfrom.\nFurther Reading\nFor those that want to learn more about the topics discussed in this\nlecture, we provide here some relevant references.\nMathematical Models\nfor Population Growth\nIntroductions to mathematical models for population growth may be\nfound in most of the standard texts in biomathematics. Good places to\nstart are (Allen 2007; Britton 2003; Edelstein-Keshet 2005). The textbook\n(Kot\n2001) is entirely devoted to population models. An important\napplication of population growth models is to cancer biology where one\nis interested to understand the growth of tumor cell populations. Two\npapers that examine population growth models in the context of tumor\ncell growth are (Gerlee\n2013; Sarapata and de Pillis 2014).\nMathematical Models of\nInflammation\nMathematical modeling of inflammation is an area of current research.\nIn addition to the paper already referenced, (Herald 2010), we also recommend (Day et\nal. 2006; Reynolds et al. 2006).\n\n\n\nAllen, Linda J. S. 2007. Introduction to Mathematical Biology.\nPearson/Prentice Hall. https://agris.fao.org/agris-search/search.do?recordID=US201300115181.\n\n\nBritton, Nicholas F. 2003. Essential Mathematical Biology.\nSpringer Undergraduate Mathematics Series.\nSpringer-Verlag London, Ltd., London. https://doi.org/10.1007/978-1-4471-0049-2.\n\n\nDay, Judy, Jonathan Rubin, Yoram Vodovotz, Carson C. Chow, Angela\nReynolds, and Gilles Clermont. 2006. “A Reduced Mathematical Model\nof the Acute Inflammatory Response. II.\nCapturing Scenarios of Repeated Endotoxin\nAdministration.” Journal of Theoretical Biology 242 (1):\n237–56. https://doi.org/10.1016/j.jtbi.2006.02.015.\n\n\nEdelstein-Keshet, Leah. 2005. Mathematical Models in Biology.\nVol. 46. Classics in Applied Mathematics. Society for\nIndustrial and Applied Mathematics (SIAM), Philadelphia, PA. https://doi.org/10.1137/1.9780898719147.\n\n\nGerlee, Philip. 2013. “The Model Muddle: In\nSearch of Tumor Growth Laws.” Cancer\nResearch 73 (8): 2407–11. https://doi.org/10.1158/0008-5472.CAN-12-4355.\n\n\nHerald, Meagan C. 2010. “General Model of Inflammation.”\nBulletin of Mathematical Biology 72 (4): 765–79. https://doi.org/10.1007/s11538-009-9468-9.\n\n\nKot, Mark. 2001. Elements of Mathematical Ecology.\nCambridge University Press, Cambridge. https://doi.org/10.1017/CBO9780511608520.\n\n\nReynolds, Angela, Jonathan Rubin, Gilles Clermont, Judy Day, Yoram\nVodovotz, and G. Bard Ermentrout. 2006. “A Reduced Mathematical\nModel of the Acute Inflammatory Response. I.\nDerivation of Model and Analysis of\nAnti-Inflammation.” Journal of Theoretical Biology 242\n(1): 220–36. https://doi.org/10.1016/j.jtbi.2006.02.016.\n\n\nSarapata, E. A., and L. G. de Pillis. 2014. “A Comparison and\nCatalog of Intrinsic Tumor Growth Models.” Bulletin of\nMathematical Biology 76 (8): 2010–24. https://doi.org/10.1007/s11538-014-9986-y.\n\n\n\n\n",
      "last_modified": "2022-01-25T14:19:17-05:00"
    },
    {
      "path": "notes003.html",
      "title": "Course Notes 3",
      "description": "Introduction to Mathematical Modeling in Biomathematics\n",
      "author": [
        {
          "name": "Jason M. Graham",
          "url": "https://topicsinbiomath.netlify.app/"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nGoals\nOverview\nWhat is a Mathematical\nModel?\nMathematical Modeling\nFurther Reading\n\nGoals\nAfter reading this section of notes, you should\nhave an understanding of the notion of “mathematical\nmodel”,\nbe aware of typical steps in the modeling process, and\nhave gained an appreciation for the place of mathematical\nmodeling in the basic biomathematical work flow.\nOverview\nAt this point, we have introduced the basic work flow that is often\nfollowed in the practice of biomathematics. Key components of the\nbiomathematics work flow is the construction of a mathematical model and\nthe use of the model to try to solve a problem or answer a question\nstemming from the life sciences. Mathematical modeling is the process of\nconstructing or deriving a mathematical model. But what exactly is a\nmathematical model? We beleive that it is not very easy to answer this\nquestion in a way that is unique, definitive, and concise. However, we\nhope that as the course proceeds you will over time develop an internal\nunderstanding of what a mathematical model is and even gain some ability\nwith building mathematical models in the context of biomathematics.\nWhat is a Mathematical Model?\nBefore we begin to address the question of what is a mathematical\nmodel, let’s spend some time focusing just on\nnot-necessarily-mathematical models. Work in science and engineering\noften proceeds by employing models. What is a model? Consider the\nfollowing quotation:\n\nA model is a rendition of a reality which is often too difficult or\nimpossible to handle directly. A model is always a simplification, and a\ngood model is one that captures the essential features of reality,\nleaving the unessential out (Calvetti and Somersalo 2013).\n\nA great example of a scientific model is the Bohr model for the\natom. This model posits that an atom is made up of a small dense nucleus\nsurrounded by orbiting electrons. This is a model because it does not\ninclude many atomic and nuclear details. It is a useful model because it\nleads to an explanation of certain chemical properties of atoms that\ncould not be derived prior to the use of the Bohr model. Many biologists\nuse model\norganisms to investigate the biological world. For example, people\ninterested in understanding the evolution of social behavior study\nspecific species of ants or bees. These insects are used because they\nare relatively easy to keep in a lab or to observe in nature and are\nalso easy to manipulate experimentally. The use of animal\nmodels is also widespread in the study of disease and drug\ntherapies.\nA mathematical model plays a similar role to models in the more\ngeneral sense that we just described, but as you might imagine\nmathematical models are formulated and implemented mathematically. In\nthe last lecture, we very briefly indicated two mathematical models. One\nfor the growth of a population and another for certain cellular and\nmolecular interactions that occur during inflammation. Let’s look at\nanother example of a mathematical model, this time one coming from\nphysics that is likely familiar to you from a course in ordinary\ndifferential equations.\nPhysics and mechanics in particular is often interested in the motion\nof a point particle. (Notice that point particles are an abstraction\nfrom reality.) Newton’s laws tell us, among other things, that the sum\nof all forces acting on a mass is proportional to the acceleration of\nthe object. Furthermore, the constant of proportionality is the mass. In\nnotation, we have that \\(F=ma\\). Now,\nwhile \\(F=ma\\) is an equation and you\ncould reasonably argue that it is a “mathematical model” for how the\nphysical world works, \\(F=ma\\) is not\nreally representative of what we mean by a mathematical model in most\ninstances. The reason is that it is a general statement, a theory and\nnot a reference to something specific. However, we can use \\(F=ma\\) to construct mathematical models in\nmore specific situations.\nSuppose for example that we are concerned with the motion of a\nparticle of mass \\(m\\) attached to a\nspring. We can model the total force that is applied to the mass by the\nspring via the equation \\(F=-kx\\). This\nsays that the force due to the spring is linearly proportional to the\ndisplacement of the mass from it’s equilibrium (resting) position.\n(Again, this is an abstraction from reality.) The constant of\nproportionality \\(k\\) is called the\nspring constant. It encodes physical properties of a spring such as its\nstiffness. Taken together with \\(F=ma\\)\nand using that acceleration is the second derivative of displacement we\narrive at a mathematical model\n\\(\\frac{d^2 x}{dt^2} =\n-\\frac{k}{m}x.\\)\nThis is a model because it is based on several abstractions from\nreality and ignores some details such as more fine-grained details about\nthe material properties of real world springs. It also assumes an ideal\nsituation where there is no friction.\nAs you have seen in a differential equations course, or by using\nmethods we will discuss later, it can be deduced based on the form of\nthe equation \\(\\frac{d^2 x}{dt^2} =\n-\\frac{k}{m}x\\) that such a mass will oscillate with a fixed\nperiod and frequency determined by the values for \\(k\\) and \\(m\\). This leads us to another important\npoint. There are several levels of “variable” involved in the model\n\\(\\frac{d^2 x}{dt^2} = -\\frac{k}{m}x\\).\nThere is the independent variable \\(t\\)\nfor time, the dependent variable for the unknown displacement \\(x\\) (the quantity we are ultimately most\ninterested in), and there are the parameters \\(k\\) and \\(m\\).\nWe will see that most mathematical models involve parameters and it\nwill become very important to understand how the values of parameters\ninfluence the results obtained from the model. Also very important is to\nnote that variables and parameters correspond to quantities and thus\nhave some set of units associated with them. We will spend a lot of time\ntalking about why units of measurement are important but take note now\nthat a mathematical model can not make sense if there is an\ninconsistency between units for parameters or variables.\nThe last example provides some insight into mathematical modeling,\nthat is, the process of constructing or deriving a model. We begin with\nan abstraction from reality that represents those parts of the world in\nwhich we are most interested in, then we specify quantities that we want\nto relate, establish mathematical notation, and finally write down an\nequation that becomes our mathematical model. While our last example was\nvery simple (too simple), it still serves to highlight the modeling\nprocess. The next section elaborates on this.\nMathematical Modeling\nIt is important to realize two facts about mathematical modeling,\nespecially in the context of biomathematics, from the start:\nMathematical modeling is as much art as it is science. The point\nis that mathematical modeling is not routine or algorithmic. Successful\nmodeling requires creativity and intuition developed through\nexperience.\nMathematical modeling will almost certainly involve repeated\nrefinements. Unless there is a very strong reason to do otherwise, it’s\nbest to start with the simplest possible reasonable model, even at the\nrisk of oversimplification. If the model produces incorrect or\ninaccurate results relative to the problem of interest, then the model\ncan be revised in order to fix what is glaringly wrong.\nIn the next lecture, we will begin to address specific techniques\nthat can help one to get started with mathematical modeling. Here we\nwill provide a conceptual outline of the modeling process in the form of\na series of steps that one typically carries out during the course of\nthe modeling process.\nFormulate the question or state your problem. Explicitly write\ndown assumptions and what is known about the system that you want to\ndevelop a model for.\nIdentify key quantities and define variables and parameters of\ninterest. At this stage you should take careful note of the units of\nmeasurement that are associated with all of the model variables and\nparameters.\nDevelop a qualitative description of your model. Use diagrams or\nword equations to describe the relationships between variables. In the\nnext lecture we will discuss compartment modeling which is a commonly\nused method for organizing the processes and interactions of variables\nin a way that helps one to more easily write down model\nequations.\nWrite down model equations corresponding to the qualitative\ndescription in the previous step. Perform dimensional\nanalysis (covered in detail later) to make sure that there are no\ninconsistencies in your equations regarding units. At this stage it is\nvery helpful to construct a table that lists all of the variables and\nparameters appearing in the model. The table should include the units of\nmeasurement for all of the variables and parameters as well as any\nspecific parameters values that are known from experiment or the\nexisting literature.\nNondimensionalize\nthe model. Later we will cover nondimensionalization in detail. This is\na process founded on the Buckinghma\n\\(\\pi\\) theorem in which variables\nand parameters are rescaled to remove units. This process is extremely\nimportant as it often simplifies the model by reducing the number of\nparameters and pinpoints the most significant parameters (or parameter\ncombinations) in the model.\nAt this stage you will be ready to analyze or implement your model in\norder to obtain results such as qualitative or quantitative predictions.\nThe next thing to do is determine if the model results are consistent\nwith known information or experimental results. You have to do something\nto decide if your model is successful or should be revised in order to\naddress your starting question or solve the problem you have posed.\nWith this overview in hand, the next lecture will cover compartment\nmodeling and we will start to see concrete examples of mathematical\nmodels and the modeling process.\nFurther Reading\nFor general texts on mathematical modeling we recommend (Barnes and Fulford 2015; Calvetti and Somersalo 2013; Witelski and Bowen 2015). Both (Barnes and Fulford 2015; Calvetti and Somersalo 2013) provide\ngood coverage of compartment\nmodeling. Dimensional\nanalysis is covered well in (Calvetti and Somersalo 2013; Witelski and Bowen 2015).\nA nice recent reference on mathematical modeling of biological\nsystems is the chapter (Ayati 2019), which discusses modeling\napproaches in the context of microbial ecology.\n\n\n\nAyati, Bruce P. 2019. “Considerations for Modeling\nProteus Mirabilis Swarming.” In Proteus\nMirabilis, 285–96. Springer.\n\n\nBarnes, B., and G. R. Fulford. 2015. Mathematical Modelling with\nCase Studies. Third. Textbooks in Mathematics.\nCRC Press, Boca Raton, FL. https://mathscinet.ams.org/mathscinet-getitem?mr=3288754.\n\n\nCalvetti, Daniela, and Erkki Somersalo. 2013. Computational\nMathematical Modeling. Mathematical Modeling and\nComputation. Society for Industrial and Applied\nMathematics (SIAM), Philadelphia, PA. https://mathscinet.ams.org/mathscinet-getitem?mr=3013353.\n\n\nWitelski, Thomas, and Mark Bowen. 2015. Methods of Mathematical\nModelling. Springer.\n\n\n\n\n",
      "last_modified": "2022-01-25T14:19:18-05:00"
    },
    {
      "path": "r_for_biomath.html",
      "title": "R for Biomathematics",
      "description": "An Introduction to R for Biomathematics\n",
      "author": [
        {
          "name": "Jason M. Graham",
          "url": "https://topicsinbiomath.netlify.app/"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\n\nContents\nComputation in\nBiomathematics\nWhat is R?\nWhy R?\nAn Introduction to R\nInstalling R and\nRStudio\nR as a Calculator\nData in R\nLinear Algebra in R\nFunctions in R\nR Packages\nVisualization in R\nNumerical\nSolution of Differential Equations in R\nPhase-Plane Methods in\nR\n\nConclusion\n\nComputation in\nBiomathematics\nAs in other scientific disciplines, numerical and scientific\ncomputing play a central role in biomathematics. For the purposes of\nTopics in Biomathematics, we are mainly interested in the\nnumerical solution of mathematical problems, e.g., ordinary\ndifferential equations, and scientific visualization, e.g.,\nplotting functions. Numerous computing platforms or environments are\nused in biomathematics. Some notable options include\nMATLAB or Octave,\nMaple,\nPython,\nXPPAUT,\nR, and\nJulia.\nThe purpose of this document is to provide an introduction to parts\nof the R computing ecosystem that are particularly useful for\nbiomathematics.\nWhat is R?\nR is\nan open-source statistical computing platform that was developed as an\nalternative to proprietary statistical software. In the years since it’s\ninitial release, R has become immensely popular and a vast ecosystem of\nopen-source software has developed around R that greatly enhances it’s\nutility in science.\nWhy R?\nGiven many other options, why do we focus on R as the computing tool\nof choice in Topics in Biomathematics? The principal reasons\nare:\nR is free but also well-developed and widely-supported.\nEven though it was developed for statistical applications, R\nworks well for numerical computing of the sort that is useful in\nbiomathematics.\nThe RStudio integrated\ndevelopment environment (IDE) facilitates not only coding in R but also\npresenting and sharing results so as to align nicely with the course\nobjective “Communicate effectively in writing their work in applying the\ntechniques of applied mathematics to problems arising in the life\nsciences.”.\nMany biologists “speak” R and it is very helpful to have a common\nlanguage when collaborating on interdisciplinary problems.\nAn Introduction to R\nIn what follows, we illustrate some R commands that will be used\ncommonly throughout the Topics in Biomathematics course. This\ndocument is by no means comprehensive. The best ways to learn more about\nR are\nby using the swirl package,\nand\nsearching the web for specific topics.\nHere is a short video about swirl:\n\n\n\n\n\n\n\nInstalling R and RStudio\nR and RStudio are both free and easy to install. The videos below can\nserve as a helpful guide if you want to use them. Alternatively, you can\naccess R and RStudio through a web browser without direct installation\nvia RStudio Cloud. This does\nrequire an account but is free to set up.\nInstallation on Mac\nRead this\narticle or watch this video:\n\n\n\n\n\n\n\nInstallation on PC\nRead this\narticle or watch this video:\n\n\n\n\n\n\n\nRStudio Cloud\nHere is an intro to RStudio Cloud:\n\n\n\n\n\n\n\nR as a Calculator\nR can be used for basic arithmetic calculations:\n\n\n(1 + 2) # addition\n\n\n[1] 3\n\n(6 - 4) # subtraction \n\n\n[1] 2\n\n(3*5) # multiplication \n\n\n[1] 15\n\n(8/3) # division\n\n\n[1] 2.666667\n\n(2^3) # exponentiation\n\n\n[1] 8\n\nThere are also a number of mathematical functions:\n\n\n(exp(1))\n\n\n[1] 2.718282\n\n(log(1))\n\n\n[1] 0\n\n(log(exp(2)))\n\n\n[1] 2\n\n(log10(10))\n\n\n[1] 1\n\n(sin(pi/4))\n\n\n[1] 0.7071068\n\n(cos(pi/3))\n\n\n[1] 0.5\n\nSometimes it is convenient to store a value as a variable. The follow\ncode stores the value of 3 as a variable x and then\nmultiplies it by 1.5:\n\n\nx <- 3\n1.5*x\n\n\n[1] 4.5\n\nIn R, the notation <- is the assignment operator.\nYou can do arithmetic with variables just like you can with numbers.\nFor example,\n\n\nx <- 3\ny <- 10\n(x + y)\n\n\n[1] 13\n\n(x*y)\n\n\n[1] 30\n\n(y^x)\n\n\n[1] 1000\n\nYou should always pay close attention to the order of operations when\ndoing arithmetic in R. Use parentheses to make sure you compute what you\nmean to compute. For example,\n\n\n((3 - 2) * 6)\n\n\n[1] 6\n\nversus\n\n\n(3 - (2 * 6))\n\n\n[1] -9\n\nData in R\nThere are several common ways to represent different types of data in\nR. In this section we cover those that are most relevant to\nbiomathematics.\nNumeric Vectors\nIn R, we create a vector or array of values using concatenation with\nthe operator c. For example,\n\n\n(a <- c(1,5,-7))\n\n\n[1]  1  5 -7\n\ncreates a numeric vector with entries 1, 5, and -7, then we store the\nresult as a variable called a.\nWe can perform arithmetic operations on vectors. For example,\n\n\nb <- c(2,-1,6)\n(a + b) # vector addition\n\n\n[1]  3  4 -1\n\n(a-b) # vector subtraction\n\n\n[1]  -1   6 -13\n\n(a*b) # elementwise vector multiplication \n\n\n[1]   2  -5 -42\n\n(a^b) # elementwise vector exponentiation \n\n\n[1]      1.0      0.2 117649.0\n\nQuestion: In the last code block, what is happening\nto produce the result corresponding to a^b?\nWe can also call math functions on vectors. For example,\n\n\nx <- c(1,2,3)\n(exp(x))\n\n\n[1]  2.718282  7.389056 20.085537\n\n(cos(pi*x))\n\n\n[1] -1  1 -1\n\nNote that these math functions are “vectorized” in that the operate\nelementwise on a vector.\nCharacter Vectors\nWe can also create so-called character vectors in R. For example,\n\n\n(A <- c(\"calculus\",\"linear algebra\", \"differential equations\"))\n\n\n[1] \"calculus\"               \"linear algebra\"        \n[3] \"differential equations\"\n\nWe won’t make extensive use of character vectors in Topics in\nBiomathematics but it is useful to know that they exist.\nMatrices in R\nThe matrix functions allows us to create a matrix in R.\nFor example,\n\n\n(M <- matrix(c(1,2,3,4),2,2))\n\n\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n(N <- matrix(c(1,2,3,4,5,6),2,3))\n\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n(P <- matrix(c(1,2,3,4,5,6),3,2))\n\n\n     [,1] [,2]\n[1,]    1    4\n[2,]    2    5\n[3,]    3    6\n\n(Q <- matrix(c(1,2,3,4,5,6),2,3,byrow=TRUE))\n\n\n     [,1] [,2] [,3]\n[1,]    1    2    3\n[2,]    4    5    6\n\nLists in R\nAll of the entries in a vector or a matrix must by of the same type.\nFor example, all numeric values or all characters. In R, lists are a\ndata structure that allow us to store data of mixed types. For\nexample,\n\n\n(l1 <- list(c(1,2,3),c(\"jason\",\"graham\"),matrix(c(1,2,3,4),2,2)))\n\n\n[[1]]\n[1] 1 2 3\n\n[[2]]\n[1] \"jason\"  \"graham\"\n\n[[3]]\n     [,1] [,2]\n[1,]    1    3\n[2,]    2    4\n\n(l2 <- list(initial=c(1,12),times=seq(0,10,by=1),values=matrix(1:22,11,2))) # list with names\n\n\n$initial\n[1]  1 12\n\n$times\n [1]  0  1  2  3  4  5  6  7  8  9 10\n\n$values\n      [,1] [,2]\n [1,]    1   12\n [2,]    2   13\n [3,]    3   14\n [4,]    4   15\n [5,]    5   16\n [6,]    6   17\n [7,]    7   18\n [8,]    8   19\n [9,]    9   20\n[10,]   10   21\n[11,]   11   22\n\nNote that the entries of a list can be accessed using either indexing\nor names (provided that the list entries are named). For example,\n\n\n(l1[[2]])\n\n\n[1] \"jason\"  \"graham\"\n\n(l2[[1]])\n\n\n[1]  1 12\n\n(l2$initial)\n\n\n[1]  1 12\n\nIf a list has named elements, we can access the names using the\nnames function. For example,\n\n\nnames(l2)\n\n\n[1] \"initial\" \"times\"   \"values\" \n\nHere is a helpful video on R lists:\n\n\n\n\n\n\n\nData Frames in R\nA data frame in R is a data structure that corresponds to something\nlike a spreadsheet. A data frame is a special type of list object. You\ncan think of a data frame as a cross between a list and a matrix. Here\nis how you ceate a data frame:\n\n\n(my_data <- data.frame(course=c(\"MATH 114\",\"MATH 221\",\"MATH 222\",\"MATH 351\", \"MATH 341\"),\n                       num_students=c(10,12,8,5,7),\n                       level=c(\"F\",\"F\",\"S\",\"S\",\"T\")))\n\n\n    course num_students level\n1 MATH 114           10     F\n2 MATH 221           12     F\n3 MATH 222            8     S\n4 MATH 351            5     S\n5 MATH 341            7     T\n\nNote that a data frame contains rows and columns, every column is a\nvector (either numeric or character), and every column has the same\nnumber of entries. The columns of a data frame all have names. We can\nalso use the names function to determine the column names\nof a data frame. For example,\n\n\nnames(my_data)\n\n\n[1] \"course\"       \"num_students\" \"level\"       \n\nTypically we do not create a data frame by hand, but data is often\nread in as a data frame. The principal use of data frames in R is that\nthey are the best way to provide data to plotting functions.\nHere is a helpful video on R data frames:\n\n\n\n\n\n\n\nLinear Algebra in R\nLinear algebra plays a central role in solving problem in\nbiomathematics. This section demonstrates some linear algebra\ncomputations that will be used frequently in Topics in\nBiomathematics performed in R.\nMatrix Arithmetic\nIf \\(A\\) and \\(B\\) are matrices of the same size then we\ncan add them. Matrix addition is computed elementwise. We demonstrate\nthis in R.\n\n\n(A <- matrix(c(1,2,-1,3,1,0,2,-1,2),3,3,byrow = TRUE))\n\n\n     [,1] [,2] [,3]\n[1,]    1    2   -1\n[2,]    3    1    0\n[3,]    2   -1    2\n\n(B <- matrix(c(3,2,-1,2,1,-1,2,-3,1),3,3,byrow = TRUE))\n\n\n     [,1] [,2] [,3]\n[1,]    3    2   -1\n[2,]    2    1   -1\n[3,]    2   -3    1\n\nA + B # matrix addition\n\n\n     [,1] [,2] [,3]\n[1,]    4    4   -2\n[2,]    5    2   -1\n[3,]    4   -4    3\n\nWe can also multiply a matrix by a number (scalar multiplication). In\nR\n\n\n3 * A\n\n\n     [,1] [,2] [,3]\n[1,]    3    6   -3\n[2,]    9    3    0\n[3,]    6   -3    6\n\nRecall that if \\(A\\) is an \\(m\\times n\\) matrix and \\(B\\) is an \\(n\n\\times p\\) matrix, then we can form the matrix\nproduct \\(AB\\) which will be a\nmatrix of size \\(m\\times p\\). We\ndemonstrate this in R.\n\n\n(A <- matrix(c(1,2,-1,3,1,0,2,-1,2),3,3,byrow = TRUE))\n\n\n     [,1] [,2] [,3]\n[1,]    1    2   -1\n[2,]    3    1    0\n[3,]    2   -1    2\n\n(B <- matrix(c(3,2,-1,2,1,-1),3,2,byrow = TRUE))\n\n\n     [,1] [,2]\n[1,]    3    2\n[2,]   -1    2\n[3,]    1   -1\n\nA %*% B # matrix multiplication\n\n\n     [,1] [,2]\n[1,]    0    7\n[2,]    8    8\n[3,]    9    0\n\nA special case of matrix multiplication is matrix-vector\nmultiplication. For example,\n\n\n(v <- c(1,-1,1))\n\n\n[1]  1 -1  1\n\nA %*% v # matrix-vector multiplication \n\n\n     [,1]\n[1,]   -2\n[2,]    2\n[3,]    5\n\nMatrix Transpose and\nDeterminant\nIn R, the transpose of a matrix is obtained as follows:\n\n\nt(B)\n\n\n     [,1] [,2] [,3]\n[1,]    3   -1    1\n[2,]    2    2   -1\n\nand the determinant of a square matrix is computed as\n\n\ndet(A)\n\n\n[1] -5\n\nEigenvalues and Eigenvectors\nRecall that if \\(A\\) is a square\nmatrix (\\(n\\times n\\)), then an\neigenvalue-eigenvector pair is a number \\(\\lambda\\) and a non-zero vector \\(v\\) satisfying \\(Av=\\lambda v\\). In R, we can compute the\neigenvalues and eigenvectors for a square matrix as\n\n\n(evals_evects <- eigen(A))\n\n\neigen() decomposition\n$values\n[1]  3.1986912  1.7135379 -0.9122292\n\n$vectors\n           [,1]      [,2]       [,3]\n[1,] -0.5640780 0.1133046  0.4488745\n[2,] -0.7696551 0.4763782 -0.7042167\n[3,] -0.2990769 0.8719093 -0.5500823\n\nNote that the result is an R list that consists of\na vector that contains the eigenvalues, and\na matrix, the columns of which are the eigenvectors.\nIt is a fact from linear algebra that the determinant of a square\nmatrix is the product of its eigenvalues. Let’s confirm this with our\nexample matrix:\n\n\n(det(A))\n\n\n[1] -5\n\n(prod(evals_evects$values))\n\n\n[1] -5\n\nLet’s also confirm that \\(Av=\\lambda\nv\\) for the first eigenvalue-eigenvector pair we just\ncomputed.\n\n\n(A %*% evals_evects$vectors[ ,1])\n\n\n           [,1]\n[1,] -1.8043114\n[2,] -2.4618891\n[3,] -0.9566547\n\n(evals_evects$values[1] * evals_evects$vectors[ ,1])\n\n\n[1] -1.8043114 -2.4618891 -0.9566547\n\nFunctions in R\nA function is a programming construct that takes some number of\ninputs (possibly zero), performs some operations, and returns a value\n(which may be null). Writing functions is useful in general because it\nsaves from having to rewrite the same code over and over again, makes\ncode easier to read, and facilitates reproducibility. Additionally, code\nto compute numerical solutions to differential equations requires us to\nwrite a function specifying the differential equation. Thus, we are\nmotivated to learn a little about writing functions in R. Suppose we\nwant to create a function that inputs a number, multiplies that number\nby 2, and returns the result. Here is how you do this:\n\n\nmult_by_two <- function(x){\n  return(2*x)\n}\n\n\n\nLet’s call our function:\n\n\nmult_by_two(3)\n\n\n[1] 6\n\nWe can also do the following:\n\n\nx <- 3\nmult_by_two(x)\n\n\n[1] 6\n\nWhat if we want to multiply by an arbitrary number? One way to do\nthis is as follows:\n\n\nmult_by_a <- function(x,a=2){\n  return(a*x)\n}\n\n\n\nIn the function mult_by_a we have an optional argument\nwith a default value. If a is not specified, we multiply by\n2, if a value for a is given then it is used. For\nexample:\n\n\n(mult_by_a(3))\n\n\n[1] 6\n\n(mult_by_a(3,a=4)) # a is given by name\n\n\n[1] 12\n\nx <- 4\na <- 6\n(mult_by_a(x))\n\n\n[1] 8\n\n(mult_by_a(x,a)) # a is given by position \n\n\n[1] 24\n\nLet’s try something a little more interesting. Suppose we want to\ncompute the value of an arbitrary polynomial function. Since the\ncoefficients uniquely determine the polynomial and since R can perform\nvectorized operations, we can do the following:\n\n\npoly_func <- function(x,coeff_vect=c(1)){\n  degree <- length(coeff_vect) - 1 \n  powers <- 0:degree\n  x_powers <- x^powers\n  return(sum(coeff_vect*x_powers))\n}\n\n\n\nLet’s test our function:\n\n\n(poly_func(2))\n\n\n[1] 1\n\n(poly_func(2,coeff_vect=c(3)))\n\n\n[1] 3\n\n(poly_func(2,coeff_vect=c(0,1)))\n\n\n[1] 2\n\n(poly_func(2,coeff_vect=c(0,0,1)))\n\n\n[1] 4\n\n(poly_func(2,coeff_vect=c(1,2,3)))\n\n\n[1] 17\n\nLater we will see more examples of functions in R. In you want to\nlearn more before then, here is a helpful video on writing functions in\nR:\n\n\n\n\n\n\n\nR Packages\nR packages extend the functionality of R by implementing functions\nfor various tasks. Packages must be installed before they can be used.\nInstalling packages is easy to do. Either use the\ninstall.packages function or in RStudio use the Install\nicon on the Packages tab.\nOnce you have installed the package or packages you want to use, you\ncan load them with the library function. For Topics in\nBiomathematics we will make heavy use of the plotting packages ggplot2 and ggformula,\nand the packages deSolve\nand phaseR\nfor working with differential equations. To install these packages one\ncan use\n\n\ninstall.packages(c(\"ggplot2\",\"ggformula\",\"deSolve\",\"phaseR\"))\n\n\n\nYou only ever have to install a package once. To load these packages,\nyou run\n\n\nlibrary(ggplot2)\nlibrary(ggformula)\nlibrary(deSolve)\nlibrary(phaseR)\n\n\n\nPackages must be loaded every time you begin a new R session.\nVisualization in R\nWhen you present your work you should use figures and plots to\nclearly convey your results. As mentioned, the two packages ggplot2 and ggformula\nmake it possible to create high-quality plots in R. These packages are\npowerful and extensive so we will not be able to cover their full\nfunctionality here. Hopefully what is included here is enough to get you\nstarted, at least for the purposes of Topics in Biomathematics.\nIt should be noted that ggformula is built on top of\nggplot2.\nPlotting a Function\nHere are two ways to plot a simple mathematical function of the form\n\\(y=f(x)\\) in R:\nSuppose we want to plot \\(f(x) =\nx\\cos(x)\\) over \\([0,4\\pi]\\).\nThen we can do\n\n\ngf_function(fun = function(x){x*cos(x)},xlim=c(0,4*pi))\n\n\n\n\nor\n\n\nggplot(data.frame(x=c(0,4*pi)),aes(x=x)) + \n  geom_function(fun = function(x){x*cos(x)})\n\n\n\n\nWe can modify our plots in various ways. For example,\n\n\ngf_function(fun = function(x){x*cos(x)},xlim=c(0,4*pi),color=\"blue\",lwd=2)\n\n\n\n\nor\n\n\nggplot(data.frame(x=c(0,4*pi)),aes(x=x)) + \n  geom_function(fun = function(x){x*cos(x)},color=\"blue\",lwd=2)\n\n\n\n\nMore on Plots\nIt is possible to create a variety of different types of plots using\nggplot2 and ggformula,\nand plots creating using these packages can be highly customized. As we\ngo through the Topics in Biomathematics course we will learn a\nlittle more about the utility of these packages. For now, we refer\nanyone interested to learn more to this helpful video on\nggplot2:\n\n\n\n\n\n\n\nThis\narticle provides more information on ggformula.\nNumerical\nSolution of Differential Equations in R\nA problem that we will often encounter is to obtain a numerical\nsolution to an initial value problem (IVP) for an ordinary differential\nequation (ODE) or a system of ordinary differential equations (ODEs). An\nIVP for an ODE or ODEs typically takes the form\n\\(\\frac{d{\\bf x}}{dt} = {\\bf F}({\\bf\nx}(t),t)\\),\n\\({\\bf x}(t_{0}) = {\\bf\nx}_{0}\\).\nHere \\({\\bf x}\\) is the unknown\nfunction of time and \\({\\bf F}\\) is the\nright hand side function. These may be scalars (in case of a single ODE)\nor vectors (in case of a system of ODEs). First, we will focus on the\ncase of solving a single scalar ODE, then we will examine systems on\nODEs.\nFor example, we might want to obtain a numerical solution to\n\\(\\frac{dN}{dt} = r N\\),\n\\(N(0) = 10\\),\nwith \\(r=0.5\\) and over the time\ninterval \\([0, 5]\\).\nIn order to obtain a numerical solution to an IVP for ODEs we must\nprovide at minimum the following information to the computer:\nA function that describes the right hand side \\({\\bf F}({\\bf x}(t),t)\\). Note that \\({\\bf F}\\) may involve parameters whose\nvalues will also need to be specified.\nA time interval, \\([t_{0},t_{f}]\\), over which to obtain a\nnumerical solution.\nInitial conditions \\({\\bf\nx}_{0}\\).\nFinally, once we have obtained numerical solutions to an IVP for ODEs\nit is typically desirable to plot these solutions in one way or another.\nWe will also see examples of ways to plot our numerical solutions in\nR.\nSolving a Single ODE\nTo use the methods described in this section you must make sure that\nthe deSolve package is installed and loaded. The main\nfunction for obtaining numerical solutions in the deSolve\npackage is the ode function. In order to use it, we must\nwrite a function in R syntax that describes the right hand side of our\ndifferential equation. Let’s do this for our example problem\n\\(\\frac{dN}{dt} = r N\\),\n\\(N(0) = 10\\),\nwith \\(r=0.5\\) and over the time\ninterval \\([0, 5]\\).\n\n\nMy_RHS <- function(t,state,parameters){\n  with(as.list(c(state,parameters)),{\n    dN <- r*N\n    \n    list(c(dN))\n  })\n}\n\n\n\nIn addition to describing the right hand side of the differential\nequation, we must also specify the times at which to obtain the\nnumerical solution and the initial condition. This is done as\nfollows:\n\n\nstate <- c(N=10)\ntimes <- seq(0,5,by=0.1)\n\n\n\nNow we are ready to obtain the numerical solution:\n\n\nsolN <- ode(y=state,times=times,func=My_RHS,parms=c(r=0.5))\n\n\n\nLet’s look at what has been returned by our call to the numerical\nsolver, the results of which are stored in the variable\nsolN.\n\n\nsolN\n\n\n   time         N\n1   0.0  10.00000\n2   0.1  10.51272\n3   0.2  11.05171\n4   0.3  11.61834\n5   0.4  12.21403\n6   0.5  12.84026\n7   0.6  13.49859\n8   0.7  14.19068\n9   0.8  14.91825\n10  0.9  15.68313\n11  1.0  16.48722\n12  1.1  17.33254\n13  1.2  18.22120\n14  1.3  19.15542\n15  1.4  20.13754\n16  1.5  21.17001\n17  1.6  22.25542\n18  1.7  23.39648\n19  1.8  24.59604\n20  1.9  25.85711\n21  2.0  27.18283\n22  2.1  28.57652\n23  2.2  30.04167\n24  2.3  31.58194\n25  2.4  33.20118\n26  2.5  34.90344\n27  2.6  36.69298\n28  2.7  38.57427\n29  2.8  40.55202\n30  2.9  42.63116\n31  3.0  44.81691\n32  3.1  47.11472\n33  3.2  49.53034\n34  3.3  52.06982\n35  3.4  54.73950\n36  3.5  57.54605\n37  3.6  60.49650\n38  3.7  63.59822\n39  3.8  66.85897\n40  3.9  70.28690\n41  4.0  73.89059\n42  4.1  77.67904\n43  4.2  81.66173\n44  4.3  85.84862\n45  4.4  90.25017\n46  4.5  94.87740\n47  4.6  99.74186\n48  4.7 104.85574\n49  4.8 110.23181\n50  4.9 115.88351\n51  5.0 121.82499\n\nThe method from the deSolve package returns a\nmatrix where the first column contains the time values\nat which we obtained numerical solution values and another column that\ncontains the solution values corresponding to each of the time points.\nWe can easily plot the solution values versus the time points as\nfollows:\n\n\nplot(solN,col=\"blue\")\n\n\n\n\nA nicer plot can be obtained as follows:\n\n\nggplot(as.data.frame(solN),aes(x=time,y=N)) + geom_point()\n\n\n\n\nIf we want a curve instead:\n\n\nggplot(as.data.frame(solN),aes(x=time,y=N)) + geom_line(lwd=1)\n\n\n\n\nWe can plot the numerical solution together with the analytical\nsolution \\(N(t) = 10e^{0.5 t}\\) as\nfollows:\n\n\nggplot(as.data.frame(solN),aes(x=time,y=N)) + geom_point() + \n  geom_function(fun=function(t) 10*exp(0.5*t),color=\"blue\")\n\n\n\n\nExercise: Modify what we have done using the\ndeSolve package to obtain and plot a numerical solution to\nthe IVP\n\\(\\frac{dN}{dt} = r N\\),\n\\(N(0) = 5\\),\nwith \\(r=2.5\\) and over the time\ninterval \\([0, 10]\\).\nSolving a System of ODEs\nConsider the following problem:\n\\(\\frac{dx}{dt}=-R_{0}xy\\)\n\\(\\frac{dy}{dt}=R_{0}xy - y\\)\nwith \\(R_{0} = 0.2\\) and \\(x_{0} = 0.95\\) and \\(y_{0} = 0.05\\).\nWe can code this system of ODEs in R as:\n\n\nMy_RHS <- function(t,state,parameters){\n  with(as.list(c(state,parameters)),{\n    dx <- -R0*x*y\n    dy <- R0*x*y - y\n    \n    list(c(dx,dy))\n  })\n}\n\n\n\nWe must specify our time interval and initial conditions:\n\n\nstate <- c(x=0.95,y=0.05)\ntimes <- seq(0,20,by=0.1)\n\n\n\nNow, we are ready to obtain the numerical solution:\n\n\nSIR_sol <- ode(y=state,times=times,func=My_RHS,parms=c(R0=0.2))\n\n\n\nAgain, the method from the deSolve package returns a\nmatrix where the first column contains the time values at which we\nobtained numerical solution values and another column that contains the\nsolution values corresponding to each of the time points. We can easily\nplot the solution values versus the time points as follows:\n\n\nplot(SIR_sol,col=\"blue\")\n\n\n\n\nQuestion: Again, what happens if we change the value\nof \\(R_{0}\\) to \\(R_{0}=1.5\\)?\nOften we want to have greater control over our plots and to be able\nto make high quality figures. The best way to do this in R is to use the\ncapabilities of the ggplot2 package. In order to do this,\nwe will first convert the matrix of solutions returned by the\node function from the deSolve package into a\ndata frame. This is basically like an spread sheet format for data.\n\n\nSIR_sol_df <- as.data.frame(SIR_sol)\n\n\n\nWe can get a sense of the structure of this data by viewing the first\nfew rows:\n\n\nhead(SIR_sol_df)\n\n\n  time         x          y\n1  0.0 0.9500000 0.05000000\n2  0.1 0.9490877 0.04610860\n3  0.2 0.9482474 0.04251971\n4  0.3 0.9474732 0.03921021\n5  0.4 0.9467598 0.03615738\n6  0.5 0.9461024 0.03334179\n\nIt is convenient to change the names of the columns to something more\nmeaningful as follows:\n\n\nnames(SIR_sol_df) <- c(\"time\",\"susceptible\",\"infected\")\n\n\n\nLet’s look at the first few rows again:\n\n\nhead(SIR_sol_df)\n\n\n  time susceptible   infected\n1  0.0   0.9500000 0.05000000\n2  0.1   0.9490877 0.04610860\n3  0.2   0.9482474 0.04251971\n4  0.3   0.9474732 0.03921021\n5  0.4   0.9467598 0.03615738\n6  0.5   0.9461024 0.03334179\n\nNow, we can obtain plots by doing commands like:\n\n\nggplot(data=SIR_sol_df,mapping=aes(x=time,y=susceptible)) + geom_line()\n\n\n\n\nor\n\n\nggplot(data=SIR_sol_df,mapping=aes(x=time,y=infected)) + geom_line()\n\n\n\n\nHere are some other plotting alternatives:\n\n\n SIR_df_long <- pivot_longer(SIR_sol_df,-time,names_to = \"compartment\",values_to = \"population\")\nggplot(SIR_df_long,aes(x=time,y=population,color=compartment)) + geom_line(lwd=1)\n\n\n\n\nor\n\n\nggplot(SIR_df_long,aes(x=time,y=population)) + geom_line(lwd=1) + facet_wrap(~compartment)\n\n\n\n\nWe can also plot \\(x(t)\\) and \\(y(t)\\) together as parametric curves:\n\n\nggplot(SIR_sol_df,aes(x=susceptible,y=infected)) + geom_path(lwd=1)\n\n\n\n\nUsing color to indicate increasing values of time can be\ninteresting:\n\n\nggplot(SIR_sol_df,aes(x=susceptible,y=infected,color=time)) + geom_path(lwd=1)\n\n\n\n\nThis color scale may not be the best, let’s change it:\n\n\nggplot(SIR_sol_df,aes(x=susceptible,y=infected,color=time)) + \n  geom_path(lwd=1) +\n  scale_color_viridis_c()\n\n\n\n\nThe book (Soetaert, Cash,\nand Mazzia 2012) covers much more on numerical computing with\ndifferential equations in R.\nPhase-Plane Methods in R\nThe phaseR package facilitates the mix of qualitative\nand quantitative methods for the analysis of 1- and 2-dimensional\nautonomous systems of ODEs. We illustrate its usage.\nPhaseR for Scalar Equations\nA first-order autonmous scalar ordinary differential equation is one\nwith the general form\n\\(\\frac{dx}{dt} = f(x)\\),\nwhere \\(f(x)\\) is a continuous\n(usually even differentiable) function that does not depend explicitly\non time \\(t\\) (this is the reason for\nthe word autonomous). Most often, we are interested in the case when\n\\(f(x)\\) is a nonlinear function and we\nsometimes refer to \\(\\frac{dx}{dt} =\nf(x)\\) as a one-dimensional system.\nExample\nConsider as an example the equation\n\\(\\frac{dx}{dt} = x(1-x)\\).\nThe left hand side is the derivative \\(\\frac{dx}{dt}\\) and hence the (local) rate\nof change of \\(x\\) as a function of\ntime \\(t\\). Therefore, because of the\nequal sign, \\(f(x)\\) must also provide\ninformation about the (local) rate of change of \\(x\\) but now for various “state” values,\nthat is, values of \\(x\\).\nWe can use phaseR to analyze this problem.\nFirst we need to describe the differential equation:\n\n\nnondim_logistic <- function (t, x, parameters) \n{\n    list(x * (1 - x))\n}\n\n\n\nNow we plot what is called the phase portrait:\n\n\nnondim_logistic_phasePortrait <- phasePortrait(nondim_logistic,\n                                        ylim   = c(-0.5, 1.5),\n                                        points = 10,\n                                        frac   = 0.5)\n\n\n\n\nThe arrows here tell us, starting from an initial state value \\(x\\), whether the solution to the\ndifferential equation will increase as a function of time or decrease as\na function of time.\nFurther, we can use phaseR to obtain some “trajectories”\nto our ODE:\n\n\nnondim_logistic_flow <- flowField(nondim_logistic,\n                                 xlim       = c(0, 10),\n                                 ylim       = c(-0.5, 1.5),\n                                 parameters = NULL,\n                                 points     = 15,\n                                 system     = \"one.dim\",add=FALSE)\nnondim_logistic_solutions <- trajectory(nondim_logistic,\n                                        y0   = c(0,0.5,1,1.5),\n                                        tlim=c(0,10),\n                                        system = \"one.dim\")\n\n\n\n\nThere is an general function in phaseR that will carry\nout a complete qualitative analysis for an autonomous system (either\none-dimensional or two-dimensional). For example, call the following\nfunction in the R console:\n\n\nphasePlaneAnalysis(nondim_logistic,xlim = c(0,10),ylim = c(-1.5,1.5),system = \"one.dim\")\n\n\n\nPhaseR for Two-Dimensional\nSystems\nLet’s use phaseR to explore the dynamics of\ntwo-dimensional linear autonomous systems.\nConsider for example:\n\\(\\frac{d{\\bf x}}{dt} = A {\\bf\nx}\\),\nwhere \\(A\\) is a \\(2\\times 2\\) matrix of the form\n\\(A = \\left(\\begin{array}{cc} a & 0 \\\\\n0 & -1 \\end{array}\\right)\\).\nLet’s examine how various values of \\(a\\) change the dynamics (specifically the\nphase portraits) of the systems. Observe that as long as \\(a\\neq 0\\) there is a unique steady-state\n\\({\\bf x}^{\\ast}={\\bf 0}\\).\nPhase Portraits for Varying \\(a\\)\n\n\nsimple_linear <- function(t,state,parameters){\n  with(as.list(c(state,parameters)),{\n    dx <- a*state[1]\n    dy <- -state[2]\n    \n    list(c(dx,dy))\n  })\n}\n\n\n\n\n\na_val <- -2\n\n\n\n\n\nsimpleLinear_flowField  <- flowField(simple_linear,\n                                       xlim       = c(-2, 2),\n                                       ylim       = c(-2, 2),\n                                       parameters = c(a=a_val),\n                                       points     = 19,\n                                       add = FALSE)\n\n\n\n\nLet’s add some solution curves:\n\n\nsimpleLinear_flowField  <- flowField(simple_linear,\n                                       xlim       = c(-2, 2),\n                                       ylim       = c(-2, 2),\n                                       parameters = c(a=a_val),\n                                       points     = 19,\n                                       add = FALSE)\nstate                        <- matrix(c(1,1,1,-1,-1,1,-1,-1,0,2,0,-2,-1,0,1,0),\n                                    8, 2, byrow = TRUE)\nsimpleLinear_trajectory <- trajectory(simple_linear,\n                                        y0         = state,\n                                        tlim       = c(0, 10),\n                                        parameters = c(a=a_val),add=TRUE)\n\n\n\n\nLet’s plot the numerical solutions as a function of time for specific\ninitial conditions:\n\n\nstate <- c(x=1,y=1)\ntimes <- seq(0,10,by=0.05)\nsimple_linear_sol <- ode(y=state,times=times,func=simple_linear,parms=c(a=a_val))\nplot(simple_linear_sol,col=\"blue\")\n\n\n\n\nTwo-dimensional\nNon-Linear Autonomous Systems\nGenerally, a two-dimensional autonomous system has the form\n\\[\n\\begin{align*}\n\\frac{dx}{dt} &= f(x,y) \\\\\n\\frac{dy}{dt} &= g(x,y),\n\\end{align*}\n\\] Such as system is sometimes called a vector field.\nLet’s adapt our code to examine some phase portraits for a nonlinear\nsystem.\n\n\nnon_linear <- function(t,state,parameters){\n  with(as.list(c(state,parameters)),{\n    x <- state[1]\n    y <- state[2]\n    dx <- -x + x^3\n    dy <- -2*y\n    \n    list(c(dx,dy))\n  })\n}\n\n\n\nFirst we plot the vector field:\n\n\nnonLinear_flowField  <- flowField(non_linear,\n                                       xlim       = c(-2, 2),\n                                       ylim       = c(-2, 2),\n                                       parameters = NULL,\n                                       points     = 19,\n                                       add = FALSE)\n\n\n\n\nNow we can obtain a more detailed picture of the phase portrait:\n\n\nnonLinear_flowField  <- flowField(non_linear,\n                                       xlim       = c(-2, 2),\n                                       ylim       = c(-2, 2),\n                                       parameters = NULL,\n                                       points     = 19,\n                                       add = FALSE)\nnonLinear_nullclines <- nullclines(non_linear,\n                                        xlim       = c(-2, 2),\n                                        ylim       = c(-2, 2),\n                                        parameters = NULL,\n                                        points     = 500)\nstate                        <- matrix(c(1.5,1,1.5,-1,-1.5,1,-1.5,-1,\n                                         -0.5,1,0.5,1,-0.5,-1,0.5,-1,-1,0,1,0,0,0),\n                                    11, 2, byrow = TRUE)\nnonLinear_trajectory <- trajectory(non_linear,\n                                        y0         = state,\n                                        tlim       = c(0, 10),\n                                        parameters = NULL,add=TRUE)\n\n\n\n\nObserve that steady-states occur where nullclines intersect.\nLet’s look at the solution curves \\(x(t)\\) and \\(y(t)\\):\n\n\nstate <- c(x=-0.5,y=1)\ntimes <- seq(0,10,by=0.05)\nnon_linear_sol <- ode(y=state,times=times,func=non_linear,parms=NULL)\nplot(non_linear_sol,col=\"blue\")\n\n\n\n\nYou can learn more about the functionality of phaseR by\nreading this\npage or this\narticle.\nConclusion\nWe have very briefly touched on the basics of R that is useful in\nTopics in Biomathematics. If there are specific topics that\ninterest you or there is a specific type of problem you want to try to\nuse R to solve, we recommend searching the web as there is a plethora of\ntutorials, documentation, and helpful discussions to be found\nonline.\n\n\n\nSoetaert, Karline, Jeff Cash, and Francesca Mazzia. 2012. Solving\nDifferential Equations in R. Use r! Springer, New\nYork. https://doi.org/10.1007/978-3-642-28070-2.\n\n\n\n\n",
      "last_modified": "2022-01-25T14:19:35-05:00"
    }
  ],
  "collections": []
}
